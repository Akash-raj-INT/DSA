#include <stdio.h>

void swap(int *x, int *y) {
    int temp = *x;
    *x = *y;
    *y = temp;
}

void minHeapify(int heap[], int size, int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < size && heap[left] < heap[smallest]) {
        smallest = left;
    }

    if (right < size && heap[right] < heap[smallest]) {
        smallest = right;
    }

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        minHeapify(heap, size, smallest);
    }
}

void buildMinHeap(int heap[], int size) {
    for (int i = size / 2 - 1; i >= 0; i--) {
        minHeapify(heap, size, i);
    }
}

void insertElement(int heap[], int *size, int value) {
    (*size)++;
    int i = *size - 1;
    heap[i] = value;

    while (i > 0 && heap[(i - 1) / 2] > heap[i]) {
        swap(&heap[i], &heap[(i - 1) / 2]);
        i = (i - 1) / 2;
    }
}

void deleteRoot(int heap[], int *size) {
    if (*size <= 0) {
        return;
    }

    if (*size == 1) {
        (*size)--;
        return;
    }

    heap[0] = heap[*size - 1];
    (*size)--;
    minHeapify(heap, *size, 0);
}

int main() {
    int n;
    scanf("%d", &n);

    int heap[n];
    for (int i = 0; i < n; i++) {
        scanf("%d", &heap[i]);
    }

    buildMinHeap(heap, n);
    deleteRoot(heap, &n);

    // Print the Min-Heap after deletion
    for (int i = 0; i < n; i++) {
        printf("%d ", heap[i]);
    }

    return 0;
}
